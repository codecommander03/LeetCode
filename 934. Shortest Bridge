class Solution {
public:
    int n;
    void dfs(vector<vector<int>>& grid,int i,int j,vector<vector<bool>>&vis){
        if(i<0 || j<0 || j>=n || i>=n || !grid[i][j] || vis[i][j]) return;

        int dx[] = {0,0,-1,1};
        int dy[] = {-1,1,0,0};
        vis[i][j] = true;

        for(int k=0;k<4;k++){
            dfs(grid,i+dx[k],j+dy[k],vis);
        }
    }
    int shortestBridge(vector<vector<int>>& grid) {
        n = grid.size();
        vector<vector<bool>> vis(n,vector<bool>(n,false));

        bool flag = false;
        for(int i=0;i<n;i++){
            if(flag) break;
            for(int j=0;j<n;j++){
                if(grid[i][j]==1){
                    dfs(grid,i,j,vis);
                    flag = true;
                    break;
                }
            }
        }

        queue<pair<int,int>> q;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(vis[i][j]){
                    q.push({i,j});
                    //cout<<i<<","<<j<<" ";
                }
            }
        }
        int move[4][2] = {{0,1},{0,-1},{1,0},{-1,0}};
        int ans = 0;
        
        while(!q.empty()){
            int sz = q.size();
            while(sz--){
                pair<int,int> front = q.front();
                q.pop();

                for(int i=0;i<4;i++){
                    int x = front.first + move[i][0];
                    int y = front.second + move[i][1];

                    if(x<0 || y<0 || x>=n || y>=n || vis[x][y]) continue;

                    if(grid[x][y]==1) return ans;

                    q.push({x,y});
                    vis[x][y] = true;
                }
            }
            ans++;
        }
        return -1;
    }
};
