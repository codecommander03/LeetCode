class Solution {
public:
    int dp[101][101],n;
    vector<int> pre;
    int help(int l,int r,vector<int>&v,int m){
        if(l==r) return 1;
        if(dp[l][r] != -1) return dp[l][r];

        int sum=pre[r];
        if(l) sum -= pre[l-1];

        if(r==l+1) return dp[l][r] = sum>=m;

        dp[l][r] = false;
        for(int i=l;i<r;i++){
            if(help(l,i,v,m)==1 && help(i+1,r,v,m)==1) return dp[l][r] = true;
        }
        return dp[l][r];
    }
    bool canSplitArray(vector<int>& nums, int m) {
        n = nums.size();
        memset(dp,-1,sizeof(dp));
        pre.resize(n,0);
        pre[0] = nums[0];
        for(int i=1;i<n;i++) pre[i]=pre[i-1]+nums[i];
        if(n==2) return true;
        return help(0,n-1,nums,m);
    }
};
